// Generated by gencpp from file gcloud_speech_msgs/SpeechToTextAction.msg
// DO NOT EDIT!


#ifndef GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTACTION_H
#define GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTACTION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <gcloud_speech_msgs/SpeechToTextActionGoal.h>
#include <gcloud_speech_msgs/SpeechToTextActionResult.h>
#include <gcloud_speech_msgs/SpeechToTextActionFeedback.h>

namespace gcloud_speech_msgs
{
template <class ContainerAllocator>
struct SpeechToTextAction_
{
  typedef SpeechToTextAction_<ContainerAllocator> Type;

  SpeechToTextAction_()
    : action_goal()
    , action_result()
    , action_feedback()  {
    }
  SpeechToTextAction_(const ContainerAllocator& _alloc)
    : action_goal(_alloc)
    , action_result(_alloc)
    , action_feedback(_alloc)  {
  (void)_alloc;
    }



   typedef  ::gcloud_speech_msgs::SpeechToTextActionGoal_<ContainerAllocator>  _action_goal_type;
  _action_goal_type action_goal;

   typedef  ::gcloud_speech_msgs::SpeechToTextActionResult_<ContainerAllocator>  _action_result_type;
  _action_result_type action_result;

   typedef  ::gcloud_speech_msgs::SpeechToTextActionFeedback_<ContainerAllocator>  _action_feedback_type;
  _action_feedback_type action_feedback;




  typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechToTextAction_

typedef ::gcloud_speech_msgs::SpeechToTextAction_<std::allocator<void> > SpeechToTextAction;

typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextAction > SpeechToTextActionPtr;
typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextAction const> SpeechToTextActionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gcloud_speech_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gcloud_speech_msgs': ['/home/users/danbing/catkin_ws_fetch33/src/gcloud_speech_msgs/msg', '/home/users/danbing/catkin_ws_fetch33/devel/.private/gcloud_speech_msgs/share/gcloud_speech_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "52fe46c8c5a875a67d6e712fe3711e91";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x52fe46c8c5a875a6ULL;
  static const uint64_t static_value2 = 0x7d6e712fe3711e91ULL;
};

template<class ContainerAllocator>
struct DataType< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gcloud_speech_msgs/SpeechToTextAction";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
SpeechToTextActionGoal action_goal\n\
SpeechToTextActionResult action_result\n\
SpeechToTextActionFeedback action_feedback\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/SpeechToTextActionGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalID goal_id\n\
SpeechToTextGoal goal\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalID\n\
# The stamp should store the time at which this goal was requested.\n\
# It is used by an action server when it tries to preempt all\n\
# goals that were requested before a certain time\n\
time stamp\n\
\n\
# The id provides a way to associate feedback and\n\
# result message with specific goal requests. The id\n\
# specified must be unique.\n\
string id\n\
\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/SpeechToTextGoal\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal definition\n\
# Equivalent to google.cloud.speech.v1.StreamingRecognitionConfig. See also:\n\
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#streamingrecognitionconfig\n\
\n\
# A list of strings containing words and phrases \"hints\" so that the speech\n\
# recognition is more likely to recognize them. This can be used to improve the\n\
# accuracy for specific words and phrases, for example, if specific commands are\n\
# typically spoken by the user. This can also be used to add additional words to\n\
# the vocabulary of the recognizer.\n\
string[] hints\n\
\n\
# Maximum number of recognition hypotheses to be returned. Specifically, the\n\
# maximum number of RecognitionHypothesis messages within each\n\
# SpeechToTextFeedback. The server may return fewer than max_alternatives. Valid\n\
# values are 0-30. A value of 0 or 1 will return a maximum of one. If omitted,\n\
# will return a maximum of one.\n\
int32 max_alternatives\n\
\n\
# Maximum listening duration. The recognizer will start listening immediately,\n\
# and will stop listening after \"listen_duration_sec\" seconds. If 0 or omitted,\n\
# will use an internal default value (14 seconds).\n\
int32 listen_duration_sec\n\
\n\
# Maximum recognition duration. The recognizer will start counting down\n\
# immediately, and after max_recognition_duration_sec seconds it will return no\n\
# matter whether there is a recognition result. If 0 or omitted, will use\n\
# a default value: listen_duration_sec + 2.\n\
int32 max_recognition_duration_sec\n\
\n\
\n\
# If false or omitted, interim results (tentative hypotheses) may be returned as\n\
# they become available (these interim results are indicated with the\n\
# is_portion_final=false flag). If true, only is_portion_final=true result(s)\n\
# are returned.\n\
bool suppress_interim_results\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/SpeechToTextActionResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
SpeechToTextResult result\n\
\n\
================================================================================\n\
MSG: actionlib_msgs/GoalStatus\n\
GoalID goal_id\n\
uint8 status\n\
uint8 PENDING         = 0   # The goal has yet to be processed by the action server\n\
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server\n\
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing\n\
                            #   and has since completed its execution (Terminal State)\n\
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)\n\
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due\n\
                            #    to some failure (Terminal State)\n\
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,\n\
                            #    because the goal was unattainable or invalid (Terminal State)\n\
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing\n\
                            #    and has not yet completed execution\n\
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,\n\
                            #    but the action server has not yet confirmed that the goal is canceled\n\
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing\n\
                            #    and was successfully cancelled (Terminal State)\n\
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be\n\
                            #    sent over the wire by an action server\n\
\n\
#Allow for the user to associate a string with GoalStatus for debugging\n\
string text\n\
\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/SpeechToTextResult\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
\n\
# Result definition\n\
\n\
# If anything goes wrong, is_error will be set and error_info will contain error\n\
# messages.\n\
bool is_error\n\
string error_info\n\
\n\
# Most probable hypothesis for the all portion of utterances, concatenated.\n\
string transcript\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/SpeechToTextActionFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
Header header\n\
actionlib_msgs/GoalStatus status\n\
SpeechToTextFeedback feedback\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/SpeechToTextFeedback\n\
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
\n\
# Feedback definition: users should mostly rely on these feedbacks to get\n\
# recognition results.\n\
# Equivalent to google.cloud.speech.v1.StreamingRecognitionResult. See also:\n\
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#speechrecognitionresult\n\
\n\
# Transcript text representing the words that the user spoke. The length of this\n\
# array is equal to the following \"confidence\" array.\n\
gcloud_speech_msgs/RecognitionHypothesis[] hypotheses\n\
\n\
# If false, this SpeechToTextFeedback represents an interim result that may\n\
# change. If true, the recognizer will not return any further hypotheses for\n\
# this portion of the transcript and corresponding audio as\n\
# SpeechToTextFeedback.\n\
bool is_portion_final\n\
\n\
# An estimate of the likelihood that the recognizer will not change its guess\n\
# about this interim result. Values range from 0.0 (completely unstable) to\n\
# 1.0 (completely stable). This field is only provided for interim results\n\
# (is_portion_final=false). The default of 0.0 is a sentinel value indicating\n\
# stability was not set.\n\
float64 stability\n\
\n\
\n\
================================================================================\n\
MSG: gcloud_speech_msgs/RecognitionHypothesis\n\
# Recognition hypothesis for a portion of speech. Equivalent to\n\
# google.cloud.speech.v1.SpeechRecognitionAlternative, See also:\n\
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#speechrecognitionalternative\n\
\n\
# Transcript text representing the words that the user spoke.\n\
string transcript\n\
\n\
# The confidence estimate between 0.0 and 1.0. A higher number indicates an\n\
# estimated greater likelihood that the recognized words are correct. This field\n\
# is typically provided only for the top hypothesis, and only for\n\
# is_portion_final=true results. Clients should not rely on the confidence field\n\
# as it is not guaranteed to be accurate or consistent. The default of 0.0 is a\n\
# sentinel value indicating confidence was not set.\n\
float64 confidence\n\
";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action_goal);
      stream.next(m.action_result);
      stream.next(m.action_feedback);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechToTextAction_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gcloud_speech_msgs::SpeechToTextAction_<ContainerAllocator>& v)
  {
    s << indent << "action_goal: ";
    s << std::endl;
    Printer< ::gcloud_speech_msgs::SpeechToTextActionGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.action_goal);
    s << indent << "action_result: ";
    s << std::endl;
    Printer< ::gcloud_speech_msgs::SpeechToTextActionResult_<ContainerAllocator> >::stream(s, indent + "  ", v.action_result);
    s << indent << "action_feedback: ";
    s << std::endl;
    Printer< ::gcloud_speech_msgs::SpeechToTextActionFeedback_<ContainerAllocator> >::stream(s, indent + "  ", v.action_feedback);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTACTION_H
