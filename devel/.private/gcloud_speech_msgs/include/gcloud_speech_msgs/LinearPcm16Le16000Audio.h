// Generated by gencpp from file gcloud_speech_msgs/LinearPcm16Le16000Audio.msg
// DO NOT EDIT!


#ifndef GCLOUD_SPEECH_MSGS_MESSAGE_LINEARPCM16LE16000AUDIO_H
#define GCLOUD_SPEECH_MSGS_MESSAGE_LINEARPCM16LE16000AUDIO_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gcloud_speech_msgs
{
template <class ContainerAllocator>
struct LinearPcm16Le16000Audio_
{
  typedef LinearPcm16Le16000Audio_<ContainerAllocator> Type;

  LinearPcm16Le16000Audio_()
    : data()  {
    }
  LinearPcm16Le16000Audio_(const ContainerAllocator& _alloc)
    : data(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _data_type;
  _data_type data;




  typedef boost::shared_ptr< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> const> ConstPtr;

}; // struct LinearPcm16Le16000Audio_

typedef ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<std::allocator<void> > LinearPcm16Le16000Audio;

typedef boost::shared_ptr< ::gcloud_speech_msgs::LinearPcm16Le16000Audio > LinearPcm16Le16000AudioPtr;
typedef boost::shared_ptr< ::gcloud_speech_msgs::LinearPcm16Le16000Audio const> LinearPcm16Le16000AudioConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gcloud_speech_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gcloud_speech_msgs': ['/home/users/danbing/catkin_workspace/src/gcloud_speech_msgs/msg', '/home/users/danbing/catkin_workspace/devel/.private/gcloud_speech_msgs/share/gcloud_speech_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f43a8e1b362b75baa741461b46adc7e0";
  }

  static const char* value(const ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf43a8e1b362b75baULL;
  static const uint64_t static_value2 = 0xa741461b46adc7e0ULL;
};

template<class ContainerAllocator>
struct DataType< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gcloud_speech_msgs/LinearPcm16Le16000Audio";
  }

  static const char* value(const ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Audio samples: Linear PCM, 16 bits, little endian, 16,000 Hz.\n\
# The length of data must be even numbers (each sample is two bytes).\n\
uint8[] data\n\
";
  }

  static const char* value(const ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.data);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LinearPcm16Le16000Audio_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gcloud_speech_msgs::LinearPcm16Le16000Audio_<ContainerAllocator>& v)
  {
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint8_t>::stream(s, indent + "  ", v.data[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GCLOUD_SPEECH_MSGS_MESSAGE_LINEARPCM16LE16000AUDIO_H
