// Generated by gencpp from file gcloud_speech_msgs/SpeechToTextResult.msg
// DO NOT EDIT!


#ifndef GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTRESULT_H
#define GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTRESULT_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gcloud_speech_msgs
{
template <class ContainerAllocator>
struct SpeechToTextResult_
{
  typedef SpeechToTextResult_<ContainerAllocator> Type;

  SpeechToTextResult_()
    : is_error(false)
    , error_info()
    , transcript()  {
    }
  SpeechToTextResult_(const ContainerAllocator& _alloc)
    : is_error(false)
    , error_info(_alloc)
    , transcript(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _is_error_type;
  _is_error_type is_error;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _error_info_type;
  _error_info_type error_info;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _transcript_type;
  _transcript_type transcript;




  typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechToTextResult_

typedef ::gcloud_speech_msgs::SpeechToTextResult_<std::allocator<void> > SpeechToTextResult;

typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextResult > SpeechToTextResultPtr;
typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextResult const> SpeechToTextResultConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gcloud_speech_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gcloud_speech_msgs': ['/home/users/danbing/catkin_workspace/src/gcloud_speech_msgs/msg', '/home/users/danbing/catkin_workspace/devel/.private/gcloud_speech_msgs/share/gcloud_speech_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "273b439600f4098c4d1d44e384de6342";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x273b439600f4098cULL;
  static const uint64_t static_value2 = 0x4d1d44e384de6342ULL;
};

template<class ContainerAllocator>
struct DataType< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gcloud_speech_msgs/SpeechToTextResult";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
\n\
\n\
# Result definition\n\
\n\
# If anything goes wrong, is_error will be set and error_info will contain error\n\
# messages.\n\
bool is_error\n\
string error_info\n\
\n\
# Most probable hypothesis for the all portion of utterances, concatenated.\n\
string transcript\n\
";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.is_error);
      stream.next(m.error_info);
      stream.next(m.transcript);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechToTextResult_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gcloud_speech_msgs::SpeechToTextResult_<ContainerAllocator>& v)
  {
    s << indent << "is_error: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_error);
    s << indent << "error_info: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.error_info);
    s << indent << "transcript: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.transcript);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTRESULT_H
