// Generated by gencpp from file gcloud_speech_msgs/SpeechToTextGoal.msg
// DO NOT EDIT!


#ifndef GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTGOAL_H
#define GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gcloud_speech_msgs
{
template <class ContainerAllocator>
struct SpeechToTextGoal_
{
  typedef SpeechToTextGoal_<ContainerAllocator> Type;

  SpeechToTextGoal_()
    : hints()
    , max_alternatives(0)
    , listen_duration_sec(0)
    , max_recognition_duration_sec(0)
    , suppress_interim_results(false)  {
    }
  SpeechToTextGoal_(const ContainerAllocator& _alloc)
    : hints(_alloc)
    , max_alternatives(0)
    , listen_duration_sec(0)
    , max_recognition_duration_sec(0)
    , suppress_interim_results(false)  {
  (void)_alloc;
    }



   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _hints_type;
  _hints_type hints;

   typedef int32_t _max_alternatives_type;
  _max_alternatives_type max_alternatives;

   typedef int32_t _listen_duration_sec_type;
  _listen_duration_sec_type listen_duration_sec;

   typedef int32_t _max_recognition_duration_sec_type;
  _max_recognition_duration_sec_type max_recognition_duration_sec;

   typedef uint8_t _suppress_interim_results_type;
  _suppress_interim_results_type suppress_interim_results;




  typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> const> ConstPtr;

}; // struct SpeechToTextGoal_

typedef ::gcloud_speech_msgs::SpeechToTextGoal_<std::allocator<void> > SpeechToTextGoal;

typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextGoal > SpeechToTextGoalPtr;
typedef boost::shared_ptr< ::gcloud_speech_msgs::SpeechToTextGoal const> SpeechToTextGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gcloud_speech_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gcloud_speech_msgs': ['/home/users/danbing/catkin_ws_fetch33/src/gcloud_speech_msgs/msg', '/home/users/danbing/catkin_ws_fetch33/devel/.private/gcloud_speech_msgs/share/gcloud_speech_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "62642f8234450646d11f3cec1403c25a";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x62642f8234450646ULL;
  static const uint64_t static_value2 = 0xd11f3cec1403c25aULL;
};

template<class ContainerAllocator>
struct DataType< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gcloud_speech_msgs/SpeechToTextGoal";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
# Goal definition\n\
# Equivalent to google.cloud.speech.v1.StreamingRecognitionConfig. See also:\n\
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#streamingrecognitionconfig\n\
\n\
# A list of strings containing words and phrases \"hints\" so that the speech\n\
# recognition is more likely to recognize them. This can be used to improve the\n\
# accuracy for specific words and phrases, for example, if specific commands are\n\
# typically spoken by the user. This can also be used to add additional words to\n\
# the vocabulary of the recognizer.\n\
string[] hints\n\
\n\
# Maximum number of recognition hypotheses to be returned. Specifically, the\n\
# maximum number of RecognitionHypothesis messages within each\n\
# SpeechToTextFeedback. The server may return fewer than max_alternatives. Valid\n\
# values are 0-30. A value of 0 or 1 will return a maximum of one. If omitted,\n\
# will return a maximum of one.\n\
int32 max_alternatives\n\
\n\
# Maximum listening duration. The recognizer will start listening immediately,\n\
# and will stop listening after \"listen_duration_sec\" seconds. If 0 or omitted,\n\
# will use an internal default value (14 seconds).\n\
int32 listen_duration_sec\n\
\n\
# Maximum recognition duration. The recognizer will start counting down\n\
# immediately, and after max_recognition_duration_sec seconds it will return no\n\
# matter whether there is a recognition result. If 0 or omitted, will use\n\
# a default value: listen_duration_sec + 2.\n\
int32 max_recognition_duration_sec\n\
\n\
\n\
# If false or omitted, interim results (tentative hypotheses) may be returned as\n\
# they become available (these interim results are indicated with the\n\
# is_portion_final=false flag). If true, only is_portion_final=true result(s)\n\
# are returned.\n\
bool suppress_interim_results\n\
";
  }

  static const char* value(const ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.hints);
      stream.next(m.max_alternatives);
      stream.next(m.listen_duration_sec);
      stream.next(m.max_recognition_duration_sec);
      stream.next(m.suppress_interim_results);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SpeechToTextGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gcloud_speech_msgs::SpeechToTextGoal_<ContainerAllocator>& v)
  {
    s << indent << "hints[]" << std::endl;
    for (size_t i = 0; i < v.hints.size(); ++i)
    {
      s << indent << "  hints[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.hints[i]);
    }
    s << indent << "max_alternatives: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_alternatives);
    s << indent << "listen_duration_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.listen_duration_sec);
    s << indent << "max_recognition_duration_sec: ";
    Printer<int32_t>::stream(s, indent + "  ", v.max_recognition_duration_sec);
    s << indent << "suppress_interim_results: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.suppress_interim_results);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GCLOUD_SPEECH_MSGS_MESSAGE_SPEECHTOTEXTGOAL_H
