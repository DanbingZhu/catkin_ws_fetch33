// Generated by gencpp from file gcloud_speech_msgs/RecognitionHypothesis.msg
// DO NOT EDIT!


#ifndef GCLOUD_SPEECH_MSGS_MESSAGE_RECOGNITIONHYPOTHESIS_H
#define GCLOUD_SPEECH_MSGS_MESSAGE_RECOGNITIONHYPOTHESIS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace gcloud_speech_msgs
{
template <class ContainerAllocator>
struct RecognitionHypothesis_
{
  typedef RecognitionHypothesis_<ContainerAllocator> Type;

  RecognitionHypothesis_()
    : transcript()
    , confidence(0.0)  {
    }
  RecognitionHypothesis_(const ContainerAllocator& _alloc)
    : transcript(_alloc)
    , confidence(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _transcript_type;
  _transcript_type transcript;

   typedef double _confidence_type;
  _confidence_type confidence;




  typedef boost::shared_ptr< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> const> ConstPtr;

}; // struct RecognitionHypothesis_

typedef ::gcloud_speech_msgs::RecognitionHypothesis_<std::allocator<void> > RecognitionHypothesis;

typedef boost::shared_ptr< ::gcloud_speech_msgs::RecognitionHypothesis > RecognitionHypothesisPtr;
typedef boost::shared_ptr< ::gcloud_speech_msgs::RecognitionHypothesis const> RecognitionHypothesisConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace gcloud_speech_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'gcloud_speech_msgs': ['/home/users/danbing/catkin_ws_fetch33/src/gcloud_speech_msgs/msg', '/home/users/danbing/catkin_ws_fetch33/devel/.private/gcloud_speech_msgs/share/gcloud_speech_msgs/msg'], 'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'actionlib_msgs': ['/opt/ros/indigo/share/actionlib_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67d30fae26a67ab503aad1ca2f76d58e";
  }

  static const char* value(const ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67d30fae26a67ab5ULL;
  static const uint64_t static_value2 = 0x03aad1ca2f76d58eULL;
};

template<class ContainerAllocator>
struct DataType< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "gcloud_speech_msgs/RecognitionHypothesis";
  }

  static const char* value(const ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Recognition hypothesis for a portion of speech. Equivalent to\n\
# google.cloud.speech.v1.SpeechRecognitionAlternative, See also:\n\
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#speechrecognitionalternative\n\
\n\
# Transcript text representing the words that the user spoke.\n\
string transcript\n\
\n\
# The confidence estimate between 0.0 and 1.0. A higher number indicates an\n\
# estimated greater likelihood that the recognized words are correct. This field\n\
# is typically provided only for the top hypothesis, and only for\n\
# is_portion_final=true results. Clients should not rely on the confidence field\n\
# as it is not guaranteed to be accurate or consistent. The default of 0.0 is a\n\
# sentinel value indicating confidence was not set.\n\
float64 confidence\n\
";
  }

  static const char* value(const ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.transcript);
      stream.next(m.confidence);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct RecognitionHypothesis_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::gcloud_speech_msgs::RecognitionHypothesis_<ContainerAllocator>& v)
  {
    s << indent << "transcript: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.transcript);
    s << indent << "confidence: ";
    Printer<double>::stream(s, indent + "  ", v.confidence);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GCLOUD_SPEECH_MSGS_MESSAGE_RECOGNITIONHYPOTHESIS_H
