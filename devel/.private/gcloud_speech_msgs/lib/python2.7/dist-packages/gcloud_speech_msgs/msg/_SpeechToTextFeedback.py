# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gcloud_speech_msgs/SpeechToTextFeedback.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import gcloud_speech_msgs.msg

class SpeechToTextFeedback(genpy.Message):
  _md5sum = "9d51422b863c8960964654dda15131a8"
  _type = "gcloud_speech_msgs/SpeechToTextFeedback"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======


# Feedback definition: users should mostly rely on these feedbacks to get
# recognition results.
# Equivalent to google.cloud.speech.v1.StreamingRecognitionResult. See also:
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#speechrecognitionresult

# Transcript text representing the words that the user spoke. The length of this
# array is equal to the following "confidence" array.
gcloud_speech_msgs/RecognitionHypothesis[] hypotheses

# If false, this SpeechToTextFeedback represents an interim result that may
# change. If true, the recognizer will not return any further hypotheses for
# this portion of the transcript and corresponding audio as
# SpeechToTextFeedback.
bool is_portion_final

# An estimate of the likelihood that the recognizer will not change its guess
# about this interim result. Values range from 0.0 (completely unstable) to
# 1.0 (completely stable). This field is only provided for interim results
# (is_portion_final=false). The default of 0.0 is a sentinel value indicating
# stability was not set.
float64 stability


================================================================================
MSG: gcloud_speech_msgs/RecognitionHypothesis
# Recognition hypothesis for a portion of speech. Equivalent to
# google.cloud.speech.v1.SpeechRecognitionAlternative, See also:
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#speechrecognitionalternative

# Transcript text representing the words that the user spoke.
string transcript

# The confidence estimate between 0.0 and 1.0. A higher number indicates an
# estimated greater likelihood that the recognized words are correct. This field
# is typically provided only for the top hypothesis, and only for
# is_portion_final=true results. Clients should not rely on the confidence field
# as it is not guaranteed to be accurate or consistent. The default of 0.0 is a
# sentinel value indicating confidence was not set.
float64 confidence
"""
  __slots__ = ['hypotheses','is_portion_final','stability']
  _slot_types = ['gcloud_speech_msgs/RecognitionHypothesis[]','bool','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hypotheses,is_portion_final,stability

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpeechToTextFeedback, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hypotheses is None:
        self.hypotheses = []
      if self.is_portion_final is None:
        self.is_portion_final = False
      if self.stability is None:
        self.stability = 0.
    else:
      self.hypotheses = []
      self.is_portion_final = False
      self.stability = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.hypotheses)
      buff.write(_struct_I.pack(length))
      for val1 in self.hypotheses:
        _x = val1.transcript
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.confidence))
      _x = self
      buff.write(_struct_Bd.pack(_x.is_portion_final, _x.stability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.hypotheses is None:
        self.hypotheses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hypotheses = []
      for i in range(0, length):
        val1 = gcloud_speech_msgs.msg.RecognitionHypothesis()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.transcript = str[start:end].decode('utf-8')
        else:
          val1.transcript = str[start:end]
        start = end
        end += 8
        (val1.confidence,) = _struct_d.unpack(str[start:end])
        self.hypotheses.append(val1)
      _x = self
      start = end
      end += 9
      (_x.is_portion_final, _x.stability,) = _struct_Bd.unpack(str[start:end])
      self.is_portion_final = bool(self.is_portion_final)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.hypotheses)
      buff.write(_struct_I.pack(length))
      for val1 in self.hypotheses:
        _x = val1.transcript
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *_x))
        else:
          buff.write(struct.pack('<I%ss'%length, length, _x))
        buff.write(_struct_d.pack(val1.confidence))
      _x = self
      buff.write(_struct_Bd.pack(_x.is_portion_final, _x.stability))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.hypotheses is None:
        self.hypotheses = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hypotheses = []
      for i in range(0, length):
        val1 = gcloud_speech_msgs.msg.RecognitionHypothesis()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.transcript = str[start:end].decode('utf-8')
        else:
          val1.transcript = str[start:end]
        start = end
        end += 8
        (val1.confidence,) = _struct_d.unpack(str[start:end])
        self.hypotheses.append(val1)
      _x = self
      start = end
      end += 9
      (_x.is_portion_final, _x.stability,) = _struct_Bd.unpack(str[start:end])
      self.is_portion_final = bool(self.is_portion_final)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_Bd = struct.Struct("<Bd")
_struct_d = struct.Struct("<d")
