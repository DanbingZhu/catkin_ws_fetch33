# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from gcloud_speech_msgs/SpeechToTextGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SpeechToTextGoal(genpy.Message):
  _md5sum = "62642f8234450646d11f3cec1403c25a"
  _type = "gcloud_speech_msgs/SpeechToTextGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Goal definition
# Equivalent to google.cloud.speech.v1.StreamingRecognitionConfig. See also:
# https://cloud.google.com/speech/reference/rpc/google.cloud.speech.v1#streamingrecognitionconfig

# A list of strings containing words and phrases "hints" so that the speech
# recognition is more likely to recognize them. This can be used to improve the
# accuracy for specific words and phrases, for example, if specific commands are
# typically spoken by the user. This can also be used to add additional words to
# the vocabulary of the recognizer.
string[] hints

# Maximum number of recognition hypotheses to be returned. Specifically, the
# maximum number of RecognitionHypothesis messages within each
# SpeechToTextFeedback. The server may return fewer than max_alternatives. Valid
# values are 0-30. A value of 0 or 1 will return a maximum of one. If omitted,
# will return a maximum of one.
int32 max_alternatives

# Maximum listening duration. The recognizer will start listening immediately,
# and will stop listening after "listen_duration_sec" seconds. If 0 or omitted,
# will use an internal default value (14 seconds).
int32 listen_duration_sec

# Maximum recognition duration. The recognizer will start counting down
# immediately, and after max_recognition_duration_sec seconds it will return no
# matter whether there is a recognition result. If 0 or omitted, will use
# a default value: listen_duration_sec + 2.
int32 max_recognition_duration_sec


# If false or omitted, interim results (tentative hypotheses) may be returned as
# they become available (these interim results are indicated with the
# is_portion_final=false flag). If true, only is_portion_final=true result(s)
# are returned.
bool suppress_interim_results
"""
  __slots__ = ['hints','max_alternatives','listen_duration_sec','max_recognition_duration_sec','suppress_interim_results']
  _slot_types = ['string[]','int32','int32','int32','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       hints,max_alternatives,listen_duration_sec,max_recognition_duration_sec,suppress_interim_results

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SpeechToTextGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.hints is None:
        self.hints = []
      if self.max_alternatives is None:
        self.max_alternatives = 0
      if self.listen_duration_sec is None:
        self.listen_duration_sec = 0
      if self.max_recognition_duration_sec is None:
        self.max_recognition_duration_sec = 0
      if self.suppress_interim_results is None:
        self.suppress_interim_results = False
    else:
      self.hints = []
      self.max_alternatives = 0
      self.listen_duration_sec = 0
      self.max_recognition_duration_sec = 0
      self.suppress_interim_results = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.hints)
      buff.write(_struct_I.pack(length))
      for val1 in self.hints:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_struct_3iB.pack(_x.max_alternatives, _x.listen_duration_sec, _x.max_recognition_duration_sec, _x.suppress_interim_results))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hints = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.hints.append(val1)
      _x = self
      start = end
      end += 13
      (_x.max_alternatives, _x.listen_duration_sec, _x.max_recognition_duration_sec, _x.suppress_interim_results,) = _struct_3iB.unpack(str[start:end])
      self.suppress_interim_results = bool(self.suppress_interim_results)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.hints)
      buff.write(_struct_I.pack(length))
      for val1 in self.hints:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        if python3:
          buff.write(struct.pack('<I%sB'%length, length, *val1))
        else:
          buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self
      buff.write(_struct_3iB.pack(_x.max_alternatives, _x.listen_duration_sec, _x.max_recognition_duration_sec, _x.suppress_interim_results))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.hints = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.hints.append(val1)
      _x = self
      start = end
      end += 13
      (_x.max_alternatives, _x.listen_duration_sec, _x.max_recognition_duration_sec, _x.suppress_interim_results,) = _struct_3iB.unpack(str[start:end])
      self.suppress_interim_results = bool(self.suppress_interim_results)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3iB = struct.Struct("<3iB")
